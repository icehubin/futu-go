// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: Qot_GetSecuritySnapshot.proto

package qotgetsecuritysnapshot

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "pb/common"
	qotcommon "pb/qotcommon"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type C2S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityList []*qotcommon.Security `protobuf:"bytes,1,rep,name=securityList" json:"securityList,omitempty"` //股票
}

func (x *C2S) Reset() {
	*x = C2S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S) ProtoMessage() {}

func (x *C2S) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S.ProtoReflect.Descriptor instead.
func (*C2S) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{0}
}

func (x *C2S) GetSecurityList() []*qotcommon.Security {
	if x != nil {
		return x.SecurityList
	}
	return nil
}

// 正股类型额外数据
type EquitySnapshotExData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuedShares         *int64   `protobuf:"varint,1,req,name=issuedShares" json:"issuedShares,omitempty"`                  // 发行股本,即总股本
	IssuedMarketVal      *float64 `protobuf:"fixed64,2,req,name=issuedMarketVal" json:"issuedMarketVal,omitempty"`           // 总市值 =总股本*当前价格（单位：元）
	NetAsset             *float64 `protobuf:"fixed64,3,req,name=netAsset" json:"netAsset,omitempty"`                         // 资产净值
	NetProfit            *float64 `protobuf:"fixed64,4,req,name=netProfit" json:"netProfit,omitempty"`                       // 盈利（亏损）
	EarningsPershare     *float64 `protobuf:"fixed64,5,req,name=earningsPershare" json:"earningsPershare,omitempty"`         // 每股盈利
	OutstandingShares    *int64   `protobuf:"varint,6,req,name=outstandingShares" json:"outstandingShares,omitempty"`        // 流通股本
	OutstandingMarketVal *float64 `protobuf:"fixed64,7,req,name=outstandingMarketVal" json:"outstandingMarketVal,omitempty"` // 流通市值 =流通股本*当前价格（单位：元）
	NetAssetPershare     *float64 `protobuf:"fixed64,8,req,name=netAssetPershare" json:"netAssetPershare,omitempty"`         // 每股净资产
	EyRate               *float64 `protobuf:"fixed64,9,req,name=eyRate" json:"eyRate,omitempty"`                             // 收益率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	PeRate               *float64 `protobuf:"fixed64,10,req,name=peRate" json:"peRate,omitempty"`                            // 市盈率
	PbRate               *float64 `protobuf:"fixed64,11,req,name=pbRate" json:"pbRate,omitempty"`                            // 市净率
	PeTTMRate            *float64 `protobuf:"fixed64,12,req,name=peTTMRate" json:"peTTMRate,omitempty"`                      // 市盈率TTM
	DividendTTM          *float64 `protobuf:"fixed64,13,opt,name=dividendTTM" json:"dividendTTM,omitempty"`                  // 股息TTM，派息
	DividendRatioTTM     *float64 `protobuf:"fixed64,14,opt,name=dividendRatioTTM" json:"dividendRatioTTM,omitempty"`        // 股息率TTM（该字段为百分比字段，默认不展示%，如20实际对应20%）
	DividendLFY          *float64 `protobuf:"fixed64,15,opt,name=dividendLFY" json:"dividendLFY,omitempty"`                  // 股息LFY，上一年度派息
	DividendLFYRatio     *float64 `protobuf:"fixed64,16,opt,name=dividendLFYRatio" json:"dividendLFYRatio,omitempty"`        // 股息率LFY（该字段为百分比字段，默认不展示%，如20实际对应20%）
}

func (x *EquitySnapshotExData) Reset() {
	*x = EquitySnapshotExData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquitySnapshotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquitySnapshotExData) ProtoMessage() {}

func (x *EquitySnapshotExData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquitySnapshotExData.ProtoReflect.Descriptor instead.
func (*EquitySnapshotExData) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{1}
}

func (x *EquitySnapshotExData) GetIssuedShares() int64 {
	if x != nil && x.IssuedShares != nil {
		return *x.IssuedShares
	}
	return 0
}

func (x *EquitySnapshotExData) GetIssuedMarketVal() float64 {
	if x != nil && x.IssuedMarketVal != nil {
		return *x.IssuedMarketVal
	}
	return 0
}

func (x *EquitySnapshotExData) GetNetAsset() float64 {
	if x != nil && x.NetAsset != nil {
		return *x.NetAsset
	}
	return 0
}

func (x *EquitySnapshotExData) GetNetProfit() float64 {
	if x != nil && x.NetProfit != nil {
		return *x.NetProfit
	}
	return 0
}

func (x *EquitySnapshotExData) GetEarningsPershare() float64 {
	if x != nil && x.EarningsPershare != nil {
		return *x.EarningsPershare
	}
	return 0
}

func (x *EquitySnapshotExData) GetOutstandingShares() int64 {
	if x != nil && x.OutstandingShares != nil {
		return *x.OutstandingShares
	}
	return 0
}

func (x *EquitySnapshotExData) GetOutstandingMarketVal() float64 {
	if x != nil && x.OutstandingMarketVal != nil {
		return *x.OutstandingMarketVal
	}
	return 0
}

func (x *EquitySnapshotExData) GetNetAssetPershare() float64 {
	if x != nil && x.NetAssetPershare != nil {
		return *x.NetAssetPershare
	}
	return 0
}

func (x *EquitySnapshotExData) GetEyRate() float64 {
	if x != nil && x.EyRate != nil {
		return *x.EyRate
	}
	return 0
}

func (x *EquitySnapshotExData) GetPeRate() float64 {
	if x != nil && x.PeRate != nil {
		return *x.PeRate
	}
	return 0
}

func (x *EquitySnapshotExData) GetPbRate() float64 {
	if x != nil && x.PbRate != nil {
		return *x.PbRate
	}
	return 0
}

func (x *EquitySnapshotExData) GetPeTTMRate() float64 {
	if x != nil && x.PeTTMRate != nil {
		return *x.PeTTMRate
	}
	return 0
}

func (x *EquitySnapshotExData) GetDividendTTM() float64 {
	if x != nil && x.DividendTTM != nil {
		return *x.DividendTTM
	}
	return 0
}

func (x *EquitySnapshotExData) GetDividendRatioTTM() float64 {
	if x != nil && x.DividendRatioTTM != nil {
		return *x.DividendRatioTTM
	}
	return 0
}

func (x *EquitySnapshotExData) GetDividendLFY() float64 {
	if x != nil && x.DividendLFY != nil {
		return *x.DividendLFY
	}
	return 0
}

func (x *EquitySnapshotExData) GetDividendLFYRatio() float64 {
	if x != nil && x.DividendLFYRatio != nil {
		return *x.DividendLFYRatio
	}
	return 0
}

// 窝轮类型额外数据
type WarrantSnapshotExData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversionRate     *float64            `protobuf:"fixed64,1,req,name=conversionRate" json:"conversionRate,omitempty"`          //换股比率
	WarrantType        *int32              `protobuf:"varint,2,req,name=warrantType" json:"warrantType,omitempty"`                 //Qot_Common.WarrantType,窝轮类型
	StrikePrice        *float64            `protobuf:"fixed64,3,req,name=strikePrice" json:"strikePrice,omitempty"`                //行使价
	MaturityTime       *string             `protobuf:"bytes,4,req,name=maturityTime" json:"maturityTime,omitempty"`                //到期日时间字符串
	EndTradeTime       *string             `protobuf:"bytes,5,req,name=endTradeTime" json:"endTradeTime,omitempty"`                //最后交易日时间字符串
	Owner              *qotcommon.Security `protobuf:"bytes,6,req,name=owner" json:"owner,omitempty"`                              //所属正股
	RecoveryPrice      *float64            `protobuf:"fixed64,7,req,name=recoveryPrice" json:"recoveryPrice,omitempty"`            //收回价,仅牛熊证支持该字段
	StreetVolumn       *int64              `protobuf:"varint,8,req,name=streetVolumn" json:"streetVolumn,omitempty"`               //街货量
	IssueVolumn        *int64              `protobuf:"varint,9,req,name=issueVolumn" json:"issueVolumn,omitempty"`                 //发行量
	StreetRate         *float64            `protobuf:"fixed64,10,req,name=streetRate" json:"streetRate,omitempty"`                 //街货占比（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Delta              *float64            `protobuf:"fixed64,11,req,name=delta" json:"delta,omitempty"`                           //对冲值,仅认购认沽支持该字段
	ImpliedVolatility  *float64            `protobuf:"fixed64,12,req,name=impliedVolatility" json:"impliedVolatility,omitempty"`   //引申波幅,仅认购认沽支持该字段
	Premium            *float64            `protobuf:"fixed64,13,req,name=premium" json:"premium,omitempty"`                       //溢价（该字段为百分比字段，默认不展示%，如20实际对应20%）
	MaturityTimestamp  *float64            `protobuf:"fixed64,14,opt,name=maturityTimestamp" json:"maturityTimestamp,omitempty"`   //到期日时间戳
	EndTradeTimestamp  *float64            `protobuf:"fixed64,15,opt,name=endTradeTimestamp" json:"endTradeTimestamp,omitempty"`   //最后交易日时间戳
	Leverage           *float64            `protobuf:"fixed64,16,opt,name=leverage" json:"leverage,omitempty"`                     // 杠杆比率（倍）
	Ipop               *float64            `protobuf:"fixed64,17,opt,name=ipop" json:"ipop,omitempty"`                             // 价内/价外（该字段为百分比字段，默认不展示%，如20实际对应20%）
	BreakEvenPoint     *float64            `protobuf:"fixed64,18,opt,name=breakEvenPoint" json:"breakEvenPoint,omitempty"`         // 打和点
	ConversionPrice    *float64            `protobuf:"fixed64,19,opt,name=conversionPrice" json:"conversionPrice,omitempty"`       // 换股价
	PriceRecoveryRatio *float64            `protobuf:"fixed64,20,opt,name=priceRecoveryRatio" json:"priceRecoveryRatio,omitempty"` // 正股距收回价（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Score              *float64            `protobuf:"fixed64,21,opt,name=score" json:"score,omitempty"`                           // 综合评分
	UpperStrikePrice   *float64            `protobuf:"fixed64,22,opt,name=upperStrikePrice" json:"upperStrikePrice,omitempty"`     //上限价，仅界内证支持该字段
	LowerStrikePrice   *float64            `protobuf:"fixed64,23,opt,name=lowerStrikePrice" json:"lowerStrikePrice,omitempty"`     //下限价，仅界内证支持该字段
	InLinePriceStatus  *int32              `protobuf:"varint,24,opt,name=inLinePriceStatus" json:"inLinePriceStatus,omitempty"`    //Qot_Common.PriceType, 界内界外，仅界内证支持该字段
	IssuerCode         *string             `protobuf:"bytes,25,opt,name=issuerCode" json:"issuerCode,omitempty"`                   //发行人代码
}

func (x *WarrantSnapshotExData) Reset() {
	*x = WarrantSnapshotExData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarrantSnapshotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarrantSnapshotExData) ProtoMessage() {}

func (x *WarrantSnapshotExData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarrantSnapshotExData.ProtoReflect.Descriptor instead.
func (*WarrantSnapshotExData) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{2}
}

func (x *WarrantSnapshotExData) GetConversionRate() float64 {
	if x != nil && x.ConversionRate != nil {
		return *x.ConversionRate
	}
	return 0
}

func (x *WarrantSnapshotExData) GetWarrantType() int32 {
	if x != nil && x.WarrantType != nil {
		return *x.WarrantType
	}
	return 0
}

func (x *WarrantSnapshotExData) GetStrikePrice() float64 {
	if x != nil && x.StrikePrice != nil {
		return *x.StrikePrice
	}
	return 0
}

func (x *WarrantSnapshotExData) GetMaturityTime() string {
	if x != nil && x.MaturityTime != nil {
		return *x.MaturityTime
	}
	return ""
}

func (x *WarrantSnapshotExData) GetEndTradeTime() string {
	if x != nil && x.EndTradeTime != nil {
		return *x.EndTradeTime
	}
	return ""
}

func (x *WarrantSnapshotExData) GetOwner() *qotcommon.Security {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *WarrantSnapshotExData) GetRecoveryPrice() float64 {
	if x != nil && x.RecoveryPrice != nil {
		return *x.RecoveryPrice
	}
	return 0
}

func (x *WarrantSnapshotExData) GetStreetVolumn() int64 {
	if x != nil && x.StreetVolumn != nil {
		return *x.StreetVolumn
	}
	return 0
}

func (x *WarrantSnapshotExData) GetIssueVolumn() int64 {
	if x != nil && x.IssueVolumn != nil {
		return *x.IssueVolumn
	}
	return 0
}

func (x *WarrantSnapshotExData) GetStreetRate() float64 {
	if x != nil && x.StreetRate != nil {
		return *x.StreetRate
	}
	return 0
}

func (x *WarrantSnapshotExData) GetDelta() float64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *WarrantSnapshotExData) GetImpliedVolatility() float64 {
	if x != nil && x.ImpliedVolatility != nil {
		return *x.ImpliedVolatility
	}
	return 0
}

func (x *WarrantSnapshotExData) GetPremium() float64 {
	if x != nil && x.Premium != nil {
		return *x.Premium
	}
	return 0
}

func (x *WarrantSnapshotExData) GetMaturityTimestamp() float64 {
	if x != nil && x.MaturityTimestamp != nil {
		return *x.MaturityTimestamp
	}
	return 0
}

func (x *WarrantSnapshotExData) GetEndTradeTimestamp() float64 {
	if x != nil && x.EndTradeTimestamp != nil {
		return *x.EndTradeTimestamp
	}
	return 0
}

func (x *WarrantSnapshotExData) GetLeverage() float64 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

func (x *WarrantSnapshotExData) GetIpop() float64 {
	if x != nil && x.Ipop != nil {
		return *x.Ipop
	}
	return 0
}

func (x *WarrantSnapshotExData) GetBreakEvenPoint() float64 {
	if x != nil && x.BreakEvenPoint != nil {
		return *x.BreakEvenPoint
	}
	return 0
}

func (x *WarrantSnapshotExData) GetConversionPrice() float64 {
	if x != nil && x.ConversionPrice != nil {
		return *x.ConversionPrice
	}
	return 0
}

func (x *WarrantSnapshotExData) GetPriceRecoveryRatio() float64 {
	if x != nil && x.PriceRecoveryRatio != nil {
		return *x.PriceRecoveryRatio
	}
	return 0
}

func (x *WarrantSnapshotExData) GetScore() float64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *WarrantSnapshotExData) GetUpperStrikePrice() float64 {
	if x != nil && x.UpperStrikePrice != nil {
		return *x.UpperStrikePrice
	}
	return 0
}

func (x *WarrantSnapshotExData) GetLowerStrikePrice() float64 {
	if x != nil && x.LowerStrikePrice != nil {
		return *x.LowerStrikePrice
	}
	return 0
}

func (x *WarrantSnapshotExData) GetInLinePriceStatus() int32 {
	if x != nil && x.InLinePriceStatus != nil {
		return *x.InLinePriceStatus
	}
	return 0
}

func (x *WarrantSnapshotExData) GetIssuerCode() string {
	if x != nil && x.IssuerCode != nil {
		return *x.IssuerCode
	}
	return ""
}

// 期权类型额外数据
type OptionSnapshotExData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 *int32              `protobuf:"varint,1,req,name=type" json:"type,omitempty"`                                   //Qot_Common.OptionType,期权
	Owner                *qotcommon.Security `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"`                                  //标的股
	StrikeTime           *string             `protobuf:"bytes,3,req,name=strikeTime" json:"strikeTime,omitempty"`                        //行权日
	StrikePrice          *float64            `protobuf:"fixed64,4,req,name=strikePrice" json:"strikePrice,omitempty"`                    //行权价
	ContractSize         *int32              `protobuf:"varint,5,req,name=contractSize" json:"contractSize,omitempty"`                   //每份合约数(整型数据)
	ContractSizeFloat    *float64            `protobuf:"fixed64,22,opt,name=contractSizeFloat" json:"contractSizeFloat,omitempty"`       //每份合约数（浮点型数据）
	OpenInterest         *int32              `protobuf:"varint,6,req,name=openInterest" json:"openInterest,omitempty"`                   //未平仓合约数
	ImpliedVolatility    *float64            `protobuf:"fixed64,7,req,name=impliedVolatility" json:"impliedVolatility,omitempty"`        //隐含波动率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Premium              *float64            `protobuf:"fixed64,8,req,name=premium" json:"premium,omitempty"`                            //溢价（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Delta                *float64            `protobuf:"fixed64,9,req,name=delta" json:"delta,omitempty"`                                //希腊值 Delta
	Gamma                *float64            `protobuf:"fixed64,10,req,name=gamma" json:"gamma,omitempty"`                               //希腊值 Gamma
	Vega                 *float64            `protobuf:"fixed64,11,req,name=vega" json:"vega,omitempty"`                                 //希腊值 Vega
	Theta                *float64            `protobuf:"fixed64,12,req,name=theta" json:"theta,omitempty"`                               //希腊值 Theta
	Rho                  *float64            `protobuf:"fixed64,13,req,name=rho" json:"rho,omitempty"`                                   //希腊值 Rho
	StrikeTimestamp      *float64            `protobuf:"fixed64,14,opt,name=strikeTimestamp" json:"strikeTimestamp,omitempty"`           //行权日时间戳
	IndexOptionType      *int32              `protobuf:"varint,15,opt,name=indexOptionType" json:"indexOptionType,omitempty"`            //Qot_Common.IndexOptionType，指数期权类型
	NetOpenInterest      *int32              `protobuf:"varint,16,opt,name=netOpenInterest" json:"netOpenInterest,omitempty"`            //净未平仓合约数，仅港股期权适用
	ExpiryDateDistance   *int32              `protobuf:"varint,17,opt,name=expiryDateDistance" json:"expiryDateDistance,omitempty"`      //距离到期日天数，负数表示已过期
	ContractNominalValue *float64            `protobuf:"fixed64,18,opt,name=contractNominalValue" json:"contractNominalValue,omitempty"` //合约名义金额，仅港股期权适用
	OwnerLotMultiplier   *float64            `protobuf:"fixed64,19,opt,name=ownerLotMultiplier" json:"ownerLotMultiplier,omitempty"`     //相等正股手数，指数期权无该字段，仅港股期权适用
	OptionAreaType       *int32              `protobuf:"varint,20,opt,name=optionAreaType" json:"optionAreaType,omitempty"`              //Qot_Common.OptionAreaType，期权类型（按行权时间）
	ContractMultiplier   *float64            `protobuf:"fixed64,21,opt,name=contractMultiplier" json:"contractMultiplier,omitempty"`     //合约乘数
}

func (x *OptionSnapshotExData) Reset() {
	*x = OptionSnapshotExData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionSnapshotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionSnapshotExData) ProtoMessage() {}

func (x *OptionSnapshotExData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionSnapshotExData.ProtoReflect.Descriptor instead.
func (*OptionSnapshotExData) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{3}
}

func (x *OptionSnapshotExData) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *OptionSnapshotExData) GetOwner() *qotcommon.Security {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OptionSnapshotExData) GetStrikeTime() string {
	if x != nil && x.StrikeTime != nil {
		return *x.StrikeTime
	}
	return ""
}

func (x *OptionSnapshotExData) GetStrikePrice() float64 {
	if x != nil && x.StrikePrice != nil {
		return *x.StrikePrice
	}
	return 0
}

func (x *OptionSnapshotExData) GetContractSize() int32 {
	if x != nil && x.ContractSize != nil {
		return *x.ContractSize
	}
	return 0
}

func (x *OptionSnapshotExData) GetContractSizeFloat() float64 {
	if x != nil && x.ContractSizeFloat != nil {
		return *x.ContractSizeFloat
	}
	return 0
}

func (x *OptionSnapshotExData) GetOpenInterest() int32 {
	if x != nil && x.OpenInterest != nil {
		return *x.OpenInterest
	}
	return 0
}

func (x *OptionSnapshotExData) GetImpliedVolatility() float64 {
	if x != nil && x.ImpliedVolatility != nil {
		return *x.ImpliedVolatility
	}
	return 0
}

func (x *OptionSnapshotExData) GetPremium() float64 {
	if x != nil && x.Premium != nil {
		return *x.Premium
	}
	return 0
}

func (x *OptionSnapshotExData) GetDelta() float64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *OptionSnapshotExData) GetGamma() float64 {
	if x != nil && x.Gamma != nil {
		return *x.Gamma
	}
	return 0
}

func (x *OptionSnapshotExData) GetVega() float64 {
	if x != nil && x.Vega != nil {
		return *x.Vega
	}
	return 0
}

func (x *OptionSnapshotExData) GetTheta() float64 {
	if x != nil && x.Theta != nil {
		return *x.Theta
	}
	return 0
}

func (x *OptionSnapshotExData) GetRho() float64 {
	if x != nil && x.Rho != nil {
		return *x.Rho
	}
	return 0
}

func (x *OptionSnapshotExData) GetStrikeTimestamp() float64 {
	if x != nil && x.StrikeTimestamp != nil {
		return *x.StrikeTimestamp
	}
	return 0
}

func (x *OptionSnapshotExData) GetIndexOptionType() int32 {
	if x != nil && x.IndexOptionType != nil {
		return *x.IndexOptionType
	}
	return 0
}

func (x *OptionSnapshotExData) GetNetOpenInterest() int32 {
	if x != nil && x.NetOpenInterest != nil {
		return *x.NetOpenInterest
	}
	return 0
}

func (x *OptionSnapshotExData) GetExpiryDateDistance() int32 {
	if x != nil && x.ExpiryDateDistance != nil {
		return *x.ExpiryDateDistance
	}
	return 0
}

func (x *OptionSnapshotExData) GetContractNominalValue() float64 {
	if x != nil && x.ContractNominalValue != nil {
		return *x.ContractNominalValue
	}
	return 0
}

func (x *OptionSnapshotExData) GetOwnerLotMultiplier() float64 {
	if x != nil && x.OwnerLotMultiplier != nil {
		return *x.OwnerLotMultiplier
	}
	return 0
}

func (x *OptionSnapshotExData) GetOptionAreaType() int32 {
	if x != nil && x.OptionAreaType != nil {
		return *x.OptionAreaType
	}
	return 0
}

func (x *OptionSnapshotExData) GetContractMultiplier() float64 {
	if x != nil && x.ContractMultiplier != nil {
		return *x.ContractMultiplier
	}
	return 0
}

// 指数类型额外数据
type IndexSnapshotExData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaiseCount *int32 `protobuf:"varint,1,req,name=raiseCount" json:"raiseCount,omitempty"` // 上涨支数
	FallCount  *int32 `protobuf:"varint,2,req,name=fallCount" json:"fallCount,omitempty"`   // 下跌支数
	EqualCount *int32 `protobuf:"varint,3,req,name=equalCount" json:"equalCount,omitempty"` // 平盘支数
}

func (x *IndexSnapshotExData) Reset() {
	*x = IndexSnapshotExData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexSnapshotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexSnapshotExData) ProtoMessage() {}

func (x *IndexSnapshotExData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexSnapshotExData.ProtoReflect.Descriptor instead.
func (*IndexSnapshotExData) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{4}
}

func (x *IndexSnapshotExData) GetRaiseCount() int32 {
	if x != nil && x.RaiseCount != nil {
		return *x.RaiseCount
	}
	return 0
}

func (x *IndexSnapshotExData) GetFallCount() int32 {
	if x != nil && x.FallCount != nil {
		return *x.FallCount
	}
	return 0
}

func (x *IndexSnapshotExData) GetEqualCount() int32 {
	if x != nil && x.EqualCount != nil {
		return *x.EqualCount
	}
	return 0
}

// 板块类型额外数据
type PlateSnapshotExData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaiseCount *int32 `protobuf:"varint,1,req,name=raiseCount" json:"raiseCount,omitempty"` // 上涨支数
	FallCount  *int32 `protobuf:"varint,2,req,name=fallCount" json:"fallCount,omitempty"`   // 下跌支数
	EqualCount *int32 `protobuf:"varint,3,req,name=equalCount" json:"equalCount,omitempty"` // 平盘支数
}

func (x *PlateSnapshotExData) Reset() {
	*x = PlateSnapshotExData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlateSnapshotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlateSnapshotExData) ProtoMessage() {}

func (x *PlateSnapshotExData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlateSnapshotExData.ProtoReflect.Descriptor instead.
func (*PlateSnapshotExData) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{5}
}

func (x *PlateSnapshotExData) GetRaiseCount() int32 {
	if x != nil && x.RaiseCount != nil {
		return *x.RaiseCount
	}
	return 0
}

func (x *PlateSnapshotExData) GetFallCount() int32 {
	if x != nil && x.FallCount != nil {
		return *x.FallCount
	}
	return 0
}

func (x *PlateSnapshotExData) GetEqualCount() int32 {
	if x != nil && x.EqualCount != nil {
		return *x.EqualCount
	}
	return 0
}

//期货类型额外数据
type FutureSnapshotExData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSettlePrice    *float64 `protobuf:"fixed64,1,req,name=lastSettlePrice" json:"lastSettlePrice,omitempty"`       //昨结
	Position           *int32   `protobuf:"varint,2,req,name=position" json:"position,omitempty"`                      //持仓量
	PositionChange     *int32   `protobuf:"varint,3,req,name=positionChange" json:"positionChange,omitempty"`          //日增仓
	LastTradeTime      *string  `protobuf:"bytes,4,req,name=lastTradeTime" json:"lastTradeTime,omitempty"`             //最后交易日，只有非主连期货合约才有该字段
	LastTradeTimestamp *float64 `protobuf:"fixed64,5,opt,name=lastTradeTimestamp" json:"lastTradeTimestamp,omitempty"` //最后交易日时间戳，只有非主连期货合约才有该字段
	IsMainContract     *bool    `protobuf:"varint,6,req,name=isMainContract" json:"isMainContract,omitempty"`          //是否主连合约
}

func (x *FutureSnapshotExData) Reset() {
	*x = FutureSnapshotExData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureSnapshotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureSnapshotExData) ProtoMessage() {}

func (x *FutureSnapshotExData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureSnapshotExData.ProtoReflect.Descriptor instead.
func (*FutureSnapshotExData) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{6}
}

func (x *FutureSnapshotExData) GetLastSettlePrice() float64 {
	if x != nil && x.LastSettlePrice != nil {
		return *x.LastSettlePrice
	}
	return 0
}

func (x *FutureSnapshotExData) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *FutureSnapshotExData) GetPositionChange() int32 {
	if x != nil && x.PositionChange != nil {
		return *x.PositionChange
	}
	return 0
}

func (x *FutureSnapshotExData) GetLastTradeTime() string {
	if x != nil && x.LastTradeTime != nil {
		return *x.LastTradeTime
	}
	return ""
}

func (x *FutureSnapshotExData) GetLastTradeTimestamp() float64 {
	if x != nil && x.LastTradeTimestamp != nil {
		return *x.LastTradeTimestamp
	}
	return 0
}

func (x *FutureSnapshotExData) GetIsMainContract() bool {
	if x != nil && x.IsMainContract != nil {
		return *x.IsMainContract
	}
	return false
}

//基金类型额外数据
type TrustSnapshotExData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DividendYield    *float64 `protobuf:"fixed64,1,req,name=dividendYield" json:"dividendYield,omitempty"`      //股息率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Aum              *float64 `protobuf:"fixed64,2,req,name=aum" json:"aum,omitempty"`                          //资产规模（单位：元）
	OutstandingUnits *int64   `protobuf:"varint,3,req,name=outstandingUnits" json:"outstandingUnits,omitempty"` //总发行量
	NetAssetValue    *float64 `protobuf:"fixed64,4,req,name=netAssetValue" json:"netAssetValue,omitempty"`      //单位净值
	Premium          *float64 `protobuf:"fixed64,5,req,name=premium" json:"premium,omitempty"`                  //溢价（该字段为百分比字段，默认不展示%，如20实际对应20%）
	AssetClass       *int32   `protobuf:"varint,6,req,name=assetClass" json:"assetClass,omitempty"`             //Qot_Common.AssetClass，资产类别
}

func (x *TrustSnapshotExData) Reset() {
	*x = TrustSnapshotExData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustSnapshotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustSnapshotExData) ProtoMessage() {}

func (x *TrustSnapshotExData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustSnapshotExData.ProtoReflect.Descriptor instead.
func (*TrustSnapshotExData) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{7}
}

func (x *TrustSnapshotExData) GetDividendYield() float64 {
	if x != nil && x.DividendYield != nil {
		return *x.DividendYield
	}
	return 0
}

func (x *TrustSnapshotExData) GetAum() float64 {
	if x != nil && x.Aum != nil {
		return *x.Aum
	}
	return 0
}

func (x *TrustSnapshotExData) GetOutstandingUnits() int64 {
	if x != nil && x.OutstandingUnits != nil {
		return *x.OutstandingUnits
	}
	return 0
}

func (x *TrustSnapshotExData) GetNetAssetValue() float64 {
	if x != nil && x.NetAssetValue != nil {
		return *x.NetAssetValue
	}
	return 0
}

func (x *TrustSnapshotExData) GetPremium() float64 {
	if x != nil && x.Premium != nil {
		return *x.Premium
	}
	return 0
}

func (x *TrustSnapshotExData) GetAssetClass() int32 {
	if x != nil && x.AssetClass != nil {
		return *x.AssetClass
	}
	return 0
}

//基本快照数据
type SnapshotBasicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security                *qotcommon.Security           `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`                                  //股票
	Type                    *int32                        `protobuf:"varint,2,req,name=type" json:"type,omitempty"`                                         //Qot_Common.SecurityType,股票类型
	IsSuspend               *bool                         `protobuf:"varint,3,req,name=isSuspend" json:"isSuspend,omitempty"`                               //是否停牌
	ListTime                *string                       `protobuf:"bytes,4,req,name=listTime" json:"listTime,omitempty"`                                  //上市时间字符串
	LotSize                 *int32                        `protobuf:"varint,5,req,name=lotSize" json:"lotSize,omitempty"`                                   //每手数量
	PriceSpread             *float64                      `protobuf:"fixed64,6,req,name=priceSpread" json:"priceSpread,omitempty"`                          //价差
	UpdateTime              *string                       `protobuf:"bytes,7,req,name=updateTime" json:"updateTime,omitempty"`                              //更新时间字符串
	HighPrice               *float64                      `protobuf:"fixed64,8,req,name=highPrice" json:"highPrice,omitempty"`                              //最高价
	OpenPrice               *float64                      `protobuf:"fixed64,9,req,name=openPrice" json:"openPrice,omitempty"`                              //开盘价
	LowPrice                *float64                      `protobuf:"fixed64,10,req,name=lowPrice" json:"lowPrice,omitempty"`                               //最低价
	LastClosePrice          *float64                      `protobuf:"fixed64,11,req,name=lastClosePrice" json:"lastClosePrice,omitempty"`                   //昨收价
	CurPrice                *float64                      `protobuf:"fixed64,12,req,name=curPrice" json:"curPrice,omitempty"`                               //最新价
	Volume                  *int64                        `protobuf:"varint,13,req,name=volume" json:"volume,omitempty"`                                    //成交量
	Turnover                *float64                      `protobuf:"fixed64,14,req,name=turnover" json:"turnover,omitempty"`                               //成交额
	TurnoverRate            *float64                      `protobuf:"fixed64,15,req,name=turnoverRate" json:"turnoverRate,omitempty"`                       //换手率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	ListTimestamp           *float64                      `protobuf:"fixed64,16,opt,name=listTimestamp" json:"listTimestamp,omitempty"`                     //上市时间戳
	UpdateTimestamp         *float64                      `protobuf:"fixed64,17,opt,name=updateTimestamp" json:"updateTimestamp,omitempty"`                 //更新时间戳
	AskPrice                *float64                      `protobuf:"fixed64,18,opt,name=askPrice" json:"askPrice,omitempty"`                               //卖价
	BidPrice                *float64                      `protobuf:"fixed64,19,opt,name=bidPrice" json:"bidPrice,omitempty"`                               //买价
	AskVol                  *int64                        `protobuf:"varint,20,opt,name=askVol" json:"askVol,omitempty"`                                    //卖量
	BidVol                  *int64                        `protobuf:"varint,21,opt,name=bidVol" json:"bidVol,omitempty"`                                    //买量
	EnableMargin            *bool                         `protobuf:"varint,22,opt,name=enableMargin" json:"enableMargin,omitempty"`                        // 是否可融资，如果为true，后两个字段才有意义
	MortgageRatio           *float64                      `protobuf:"fixed64,23,opt,name=mortgageRatio" json:"mortgageRatio,omitempty"`                     // 股票抵押率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	LongMarginInitialRatio  *float64                      `protobuf:"fixed64,24,opt,name=longMarginInitialRatio" json:"longMarginInitialRatio,omitempty"`   // 融资初始保证金率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	EnableShortSell         *bool                         `protobuf:"varint,25,opt,name=enableShortSell" json:"enableShortSell,omitempty"`                  // 是否可卖空，如果为true，后三个字段才有意义
	ShortSellRate           *float64                      `protobuf:"fixed64,26,opt,name=shortSellRate" json:"shortSellRate,omitempty"`                     // 卖空参考利率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	ShortAvailableVolume    *int64                        `protobuf:"varint,27,opt,name=shortAvailableVolume" json:"shortAvailableVolume,omitempty"`        // 剩余可卖空数量（股）
	ShortMarginInitialRatio *float64                      `protobuf:"fixed64,28,opt,name=shortMarginInitialRatio" json:"shortMarginInitialRatio,omitempty"` // 卖空（融券）初始保证金率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Amplitude               *float64                      `protobuf:"fixed64,29,opt,name=amplitude" json:"amplitude,omitempty"`                             // 振幅（该字段为百分比字段，默认不展示%，如20实际对应20%）
	AvgPrice                *float64                      `protobuf:"fixed64,30,opt,name=avgPrice" json:"avgPrice,omitempty"`                               // 平均价
	BidAskRatio             *float64                      `protobuf:"fixed64,31,opt,name=bidAskRatio" json:"bidAskRatio,omitempty"`                         // 委比（该字段为百分比字段，默认不展示%，如20实际对应20%）
	VolumeRatio             *float64                      `protobuf:"fixed64,32,opt,name=volumeRatio" json:"volumeRatio,omitempty"`                         // 量比
	Highest52WeeksPrice     *float64                      `protobuf:"fixed64,33,opt,name=highest52WeeksPrice" json:"highest52WeeksPrice,omitempty"`         // 52周最高价
	Lowest52WeeksPrice      *float64                      `protobuf:"fixed64,34,opt,name=lowest52WeeksPrice" json:"lowest52WeeksPrice,omitempty"`           // 52周最低价
	HighestHistoryPrice     *float64                      `protobuf:"fixed64,35,opt,name=highestHistoryPrice" json:"highestHistoryPrice,omitempty"`         // 历史最高价
	LowestHistoryPrice      *float64                      `protobuf:"fixed64,36,opt,name=lowestHistoryPrice" json:"lowestHistoryPrice,omitempty"`           // 历史最低价
	PreMarket               *qotcommon.PreAfterMarketData `protobuf:"bytes,37,opt,name=preMarket" json:"preMarket,omitempty"`                               //Qot_Common::PreAfterMarketData 盘前数据
	AfterMarket             *qotcommon.PreAfterMarketData `protobuf:"bytes,38,opt,name=afterMarket" json:"afterMarket,omitempty"`                           //Qot_Common::PreAfterMarketData 盘后数据
	SecStatus               *int32                        `protobuf:"varint,39,opt,name=secStatus" json:"secStatus,omitempty"`                              //Qot_Common::SecurityStatus 股票状态
	ClosePrice5Minute       *float64                      `protobuf:"fixed64,40,opt,name=closePrice5Minute" json:"closePrice5Minute,omitempty"`             //5分钟收盘价
}

func (x *SnapshotBasicData) Reset() {
	*x = SnapshotBasicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotBasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotBasicData) ProtoMessage() {}

func (x *SnapshotBasicData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotBasicData.ProtoReflect.Descriptor instead.
func (*SnapshotBasicData) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{8}
}

func (x *SnapshotBasicData) GetSecurity() *qotcommon.Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *SnapshotBasicData) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SnapshotBasicData) GetIsSuspend() bool {
	if x != nil && x.IsSuspend != nil {
		return *x.IsSuspend
	}
	return false
}

func (x *SnapshotBasicData) GetListTime() string {
	if x != nil && x.ListTime != nil {
		return *x.ListTime
	}
	return ""
}

func (x *SnapshotBasicData) GetLotSize() int32 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *SnapshotBasicData) GetPriceSpread() float64 {
	if x != nil && x.PriceSpread != nil {
		return *x.PriceSpread
	}
	return 0
}

func (x *SnapshotBasicData) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *SnapshotBasicData) GetHighPrice() float64 {
	if x != nil && x.HighPrice != nil {
		return *x.HighPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetOpenPrice() float64 {
	if x != nil && x.OpenPrice != nil {
		return *x.OpenPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetLowPrice() float64 {
	if x != nil && x.LowPrice != nil {
		return *x.LowPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetLastClosePrice() float64 {
	if x != nil && x.LastClosePrice != nil {
		return *x.LastClosePrice
	}
	return 0
}

func (x *SnapshotBasicData) GetCurPrice() float64 {
	if x != nil && x.CurPrice != nil {
		return *x.CurPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *SnapshotBasicData) GetTurnover() float64 {
	if x != nil && x.Turnover != nil {
		return *x.Turnover
	}
	return 0
}

func (x *SnapshotBasicData) GetTurnoverRate() float64 {
	if x != nil && x.TurnoverRate != nil {
		return *x.TurnoverRate
	}
	return 0
}

func (x *SnapshotBasicData) GetListTimestamp() float64 {
	if x != nil && x.ListTimestamp != nil {
		return *x.ListTimestamp
	}
	return 0
}

func (x *SnapshotBasicData) GetUpdateTimestamp() float64 {
	if x != nil && x.UpdateTimestamp != nil {
		return *x.UpdateTimestamp
	}
	return 0
}

func (x *SnapshotBasicData) GetAskPrice() float64 {
	if x != nil && x.AskPrice != nil {
		return *x.AskPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetBidPrice() float64 {
	if x != nil && x.BidPrice != nil {
		return *x.BidPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetAskVol() int64 {
	if x != nil && x.AskVol != nil {
		return *x.AskVol
	}
	return 0
}

func (x *SnapshotBasicData) GetBidVol() int64 {
	if x != nil && x.BidVol != nil {
		return *x.BidVol
	}
	return 0
}

func (x *SnapshotBasicData) GetEnableMargin() bool {
	if x != nil && x.EnableMargin != nil {
		return *x.EnableMargin
	}
	return false
}

func (x *SnapshotBasicData) GetMortgageRatio() float64 {
	if x != nil && x.MortgageRatio != nil {
		return *x.MortgageRatio
	}
	return 0
}

func (x *SnapshotBasicData) GetLongMarginInitialRatio() float64 {
	if x != nil && x.LongMarginInitialRatio != nil {
		return *x.LongMarginInitialRatio
	}
	return 0
}

func (x *SnapshotBasicData) GetEnableShortSell() bool {
	if x != nil && x.EnableShortSell != nil {
		return *x.EnableShortSell
	}
	return false
}

func (x *SnapshotBasicData) GetShortSellRate() float64 {
	if x != nil && x.ShortSellRate != nil {
		return *x.ShortSellRate
	}
	return 0
}

func (x *SnapshotBasicData) GetShortAvailableVolume() int64 {
	if x != nil && x.ShortAvailableVolume != nil {
		return *x.ShortAvailableVolume
	}
	return 0
}

func (x *SnapshotBasicData) GetShortMarginInitialRatio() float64 {
	if x != nil && x.ShortMarginInitialRatio != nil {
		return *x.ShortMarginInitialRatio
	}
	return 0
}

func (x *SnapshotBasicData) GetAmplitude() float64 {
	if x != nil && x.Amplitude != nil {
		return *x.Amplitude
	}
	return 0
}

func (x *SnapshotBasicData) GetAvgPrice() float64 {
	if x != nil && x.AvgPrice != nil {
		return *x.AvgPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetBidAskRatio() float64 {
	if x != nil && x.BidAskRatio != nil {
		return *x.BidAskRatio
	}
	return 0
}

func (x *SnapshotBasicData) GetVolumeRatio() float64 {
	if x != nil && x.VolumeRatio != nil {
		return *x.VolumeRatio
	}
	return 0
}

func (x *SnapshotBasicData) GetHighest52WeeksPrice() float64 {
	if x != nil && x.Highest52WeeksPrice != nil {
		return *x.Highest52WeeksPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetLowest52WeeksPrice() float64 {
	if x != nil && x.Lowest52WeeksPrice != nil {
		return *x.Lowest52WeeksPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetHighestHistoryPrice() float64 {
	if x != nil && x.HighestHistoryPrice != nil {
		return *x.HighestHistoryPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetLowestHistoryPrice() float64 {
	if x != nil && x.LowestHistoryPrice != nil {
		return *x.LowestHistoryPrice
	}
	return 0
}

func (x *SnapshotBasicData) GetPreMarket() *qotcommon.PreAfterMarketData {
	if x != nil {
		return x.PreMarket
	}
	return nil
}

func (x *SnapshotBasicData) GetAfterMarket() *qotcommon.PreAfterMarketData {
	if x != nil {
		return x.AfterMarket
	}
	return nil
}

func (x *SnapshotBasicData) GetSecStatus() int32 {
	if x != nil && x.SecStatus != nil {
		return *x.SecStatus
	}
	return 0
}

func (x *SnapshotBasicData) GetClosePrice5Minute() float64 {
	if x != nil && x.ClosePrice5Minute != nil {
		return *x.ClosePrice5Minute
	}
	return 0
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Basic         *SnapshotBasicData     `protobuf:"bytes,1,req,name=basic" json:"basic,omitempty"`                 //快照基本数据
	EquityExData  *EquitySnapshotExData  `protobuf:"bytes,2,opt,name=equityExData" json:"equityExData,omitempty"`   //正股快照额外数据
	WarrantExData *WarrantSnapshotExData `protobuf:"bytes,3,opt,name=warrantExData" json:"warrantExData,omitempty"` //窝轮快照额外数据
	OptionExData  *OptionSnapshotExData  `protobuf:"bytes,4,opt,name=optionExData" json:"optionExData,omitempty"`   //期权快照额外数据
	IndexExData   *IndexSnapshotExData   `protobuf:"bytes,5,opt,name=indexExData" json:"indexExData,omitempty"`     //指数快照额外数据
	PlateExData   *PlateSnapshotExData   `protobuf:"bytes,6,opt,name=plateExData" json:"plateExData,omitempty"`     //板块快照额外数据
	FutureExData  *FutureSnapshotExData  `protobuf:"bytes,7,opt,name=futureExData" json:"futureExData,omitempty"`   //期货类型额外数据
	TrustExData   *TrustSnapshotExData   `protobuf:"bytes,8,opt,name=trustExData" json:"trustExData,omitempty"`     //基金类型额外数据
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{9}
}

func (x *Snapshot) GetBasic() *SnapshotBasicData {
	if x != nil {
		return x.Basic
	}
	return nil
}

func (x *Snapshot) GetEquityExData() *EquitySnapshotExData {
	if x != nil {
		return x.EquityExData
	}
	return nil
}

func (x *Snapshot) GetWarrantExData() *WarrantSnapshotExData {
	if x != nil {
		return x.WarrantExData
	}
	return nil
}

func (x *Snapshot) GetOptionExData() *OptionSnapshotExData {
	if x != nil {
		return x.OptionExData
	}
	return nil
}

func (x *Snapshot) GetIndexExData() *IndexSnapshotExData {
	if x != nil {
		return x.IndexExData
	}
	return nil
}

func (x *Snapshot) GetPlateExData() *PlateSnapshotExData {
	if x != nil {
		return x.PlateExData
	}
	return nil
}

func (x *Snapshot) GetFutureExData() *FutureSnapshotExData {
	if x != nil {
		return x.FutureExData
	}
	return nil
}

func (x *Snapshot) GetTrustExData() *TrustSnapshotExData {
	if x != nil {
		return x.TrustExData
	}
	return nil
}

type S2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotList []*Snapshot `protobuf:"bytes,1,rep,name=snapshotList" json:"snapshotList,omitempty"` //股票快照
}

func (x *S2C) Reset() {
	*x = S2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C) ProtoMessage() {}

func (x *S2C) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C.ProtoReflect.Descriptor instead.
func (*S2C) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{10}
}

func (x *S2C) GetSnapshotList() []*Snapshot {
	if x != nil {
		return x.SnapshotList
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{11}
}

func (x *Request) GetC2S() *C2S {
	if x != nil {
		return x.C2S
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetType *int32  `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"` //RetType,返回结果
	RetMsg  *string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg,omitempty"`
	ErrCode *int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode,omitempty"`
	S2C     *S2C    `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

// Default values for Response fields.
const (
	Default_Response_RetType = int32(-400)
)

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_GetSecuritySnapshot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_Qot_GetSecuritySnapshot_proto_rawDescGZIP(), []int{12}
}

func (x *Response) GetRetType() int32 {
	if x != nil && x.RetType != nil {
		return *x.RetType
	}
	return Default_Response_RetType
}

func (x *Response) GetRetMsg() string {
	if x != nil && x.RetMsg != nil {
		return *x.RetMsg
	}
	return ""
}

func (x *Response) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *Response) GetS2C() *S2C {
	if x != nil {
		return x.S2C
	}
	return nil
}

var File_Qot_GetSecuritySnapshot_proto protoreflect.FileDescriptor

var file_Qot_GetSecuritySnapshot_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x51, 0x6f, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x51, 0x6f, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x51, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x03, 0x43, 0x32, 0x53, 0x12,
	0x38, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xda, 0x04, 0x0a, 0x14, 0x45, 0x71,
	0x75, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x09, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x10, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65,
	0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x06, 0x65, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x01, 0x52, 0x06, 0x70, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x06, 0x70, 0x62, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x65, 0x54, 0x54, 0x4d, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x09, 0x70, 0x65, 0x54, 0x54, 0x4d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x54, 0x54, 0x4d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x54, 0x54, 0x4d, 0x12, 0x2a, 0x0a, 0x10,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x54, 0x54, 0x4d,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x54, 0x54, 0x4d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x4c, 0x46, 0x59, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x4c, 0x46, 0x59, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x4c, 0x46, 0x59, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x4c, 0x46,
	0x59, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xab, 0x07, 0x0a, 0x15, 0x57, 0x61, 0x72, 0x72, 0x61,
	0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x01,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x01, 0x52, 0x11, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61,
	0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x6f, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x69, 0x70, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x75, 0x70, 0x70, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x70, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xa8, 0x06, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x02, 0x28, 0x01,
	0x52, 0x11, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x67,
	0x61, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x01, 0x52, 0x04, 0x76, 0x65, 0x67, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x68, 0x6f, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x01,
	0x52, 0x03, 0x72, 0x68, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x4c, 0x6f, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22,
	0x73, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x69, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x69, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x61, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x61, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x14, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xd9,
	0x01, 0x0a, 0x13, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0d, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x61, 0x75, 0x6d, 0x12, 0x2a,
	0x0a, 0x10, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xe9, 0x0b, 0x0a, 0x11, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x6b, 0x56,
	0x6f, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x16, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x35, 0x32, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x35, 0x32, 0x57, 0x65,
	0x65, 0x6b, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x6f, 0x77, 0x65,
	0x73, 0x74, 0x35, 0x32, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x35, 0x32, 0x57, 0x65,
	0x65, 0x6b, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x6f,
	0x77, 0x65, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x51, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x51, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x8b, 0x05, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x51, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x45,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x51, 0x6f,
	0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51,
	0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4e, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x45, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x51, 0x6f, 0x74, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x45, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x03, 0x53, 0x32, 0x43, 0x12, 0x45, 0x0a, 0x0c, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x39, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x03, 0x63, 0x32, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x51, 0x6f, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x32, 0x53, 0x52, 0x03, 0x63, 0x32, 0x73, 0x22, 0x8c, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x3a, 0x04, 0x2d, 0x34, 0x30,
	0x30, 0x52, 0x07, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x03,
	0x73, 0x32, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x51, 0x6f, 0x74, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x53, 0x32, 0x43, 0x52, 0x03, 0x73, 0x32, 0x63, 0x42, 0x30, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x75, 0x74, 0x75, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x62, 0x5a, 0x19, 0x70, 0x62, 0x2f, 0x71, 0x6f, 0x74, 0x67, 0x65, 0x74, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
}

var (
	file_Qot_GetSecuritySnapshot_proto_rawDescOnce sync.Once
	file_Qot_GetSecuritySnapshot_proto_rawDescData = file_Qot_GetSecuritySnapshot_proto_rawDesc
)

func file_Qot_GetSecuritySnapshot_proto_rawDescGZIP() []byte {
	file_Qot_GetSecuritySnapshot_proto_rawDescOnce.Do(func() {
		file_Qot_GetSecuritySnapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_Qot_GetSecuritySnapshot_proto_rawDescData)
	})
	return file_Qot_GetSecuritySnapshot_proto_rawDescData
}

var file_Qot_GetSecuritySnapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_Qot_GetSecuritySnapshot_proto_goTypes = []interface{}{
	(*C2S)(nil),                          // 0: Qot_GetSecuritySnapshot.C2S
	(*EquitySnapshotExData)(nil),         // 1: Qot_GetSecuritySnapshot.EquitySnapshotExData
	(*WarrantSnapshotExData)(nil),        // 2: Qot_GetSecuritySnapshot.WarrantSnapshotExData
	(*OptionSnapshotExData)(nil),         // 3: Qot_GetSecuritySnapshot.OptionSnapshotExData
	(*IndexSnapshotExData)(nil),          // 4: Qot_GetSecuritySnapshot.IndexSnapshotExData
	(*PlateSnapshotExData)(nil),          // 5: Qot_GetSecuritySnapshot.PlateSnapshotExData
	(*FutureSnapshotExData)(nil),         // 6: Qot_GetSecuritySnapshot.FutureSnapshotExData
	(*TrustSnapshotExData)(nil),          // 7: Qot_GetSecuritySnapshot.TrustSnapshotExData
	(*SnapshotBasicData)(nil),            // 8: Qot_GetSecuritySnapshot.SnapshotBasicData
	(*Snapshot)(nil),                     // 9: Qot_GetSecuritySnapshot.Snapshot
	(*S2C)(nil),                          // 10: Qot_GetSecuritySnapshot.S2C
	(*Request)(nil),                      // 11: Qot_GetSecuritySnapshot.Request
	(*Response)(nil),                     // 12: Qot_GetSecuritySnapshot.Response
	(*qotcommon.Security)(nil),           // 13: Qot_Common.Security
	(*qotcommon.PreAfterMarketData)(nil), // 14: Qot_Common.PreAfterMarketData
}
var file_Qot_GetSecuritySnapshot_proto_depIdxs = []int32{
	13, // 0: Qot_GetSecuritySnapshot.C2S.securityList:type_name -> Qot_Common.Security
	13, // 1: Qot_GetSecuritySnapshot.WarrantSnapshotExData.owner:type_name -> Qot_Common.Security
	13, // 2: Qot_GetSecuritySnapshot.OptionSnapshotExData.owner:type_name -> Qot_Common.Security
	13, // 3: Qot_GetSecuritySnapshot.SnapshotBasicData.security:type_name -> Qot_Common.Security
	14, // 4: Qot_GetSecuritySnapshot.SnapshotBasicData.preMarket:type_name -> Qot_Common.PreAfterMarketData
	14, // 5: Qot_GetSecuritySnapshot.SnapshotBasicData.afterMarket:type_name -> Qot_Common.PreAfterMarketData
	8,  // 6: Qot_GetSecuritySnapshot.Snapshot.basic:type_name -> Qot_GetSecuritySnapshot.SnapshotBasicData
	1,  // 7: Qot_GetSecuritySnapshot.Snapshot.equityExData:type_name -> Qot_GetSecuritySnapshot.EquitySnapshotExData
	2,  // 8: Qot_GetSecuritySnapshot.Snapshot.warrantExData:type_name -> Qot_GetSecuritySnapshot.WarrantSnapshotExData
	3,  // 9: Qot_GetSecuritySnapshot.Snapshot.optionExData:type_name -> Qot_GetSecuritySnapshot.OptionSnapshotExData
	4,  // 10: Qot_GetSecuritySnapshot.Snapshot.indexExData:type_name -> Qot_GetSecuritySnapshot.IndexSnapshotExData
	5,  // 11: Qot_GetSecuritySnapshot.Snapshot.plateExData:type_name -> Qot_GetSecuritySnapshot.PlateSnapshotExData
	6,  // 12: Qot_GetSecuritySnapshot.Snapshot.futureExData:type_name -> Qot_GetSecuritySnapshot.FutureSnapshotExData
	7,  // 13: Qot_GetSecuritySnapshot.Snapshot.trustExData:type_name -> Qot_GetSecuritySnapshot.TrustSnapshotExData
	9,  // 14: Qot_GetSecuritySnapshot.S2C.snapshotList:type_name -> Qot_GetSecuritySnapshot.Snapshot
	0,  // 15: Qot_GetSecuritySnapshot.Request.c2s:type_name -> Qot_GetSecuritySnapshot.C2S
	10, // 16: Qot_GetSecuritySnapshot.Response.s2c:type_name -> Qot_GetSecuritySnapshot.S2C
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_Qot_GetSecuritySnapshot_proto_init() }
func file_Qot_GetSecuritySnapshot_proto_init() {
	if File_Qot_GetSecuritySnapshot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Qot_GetSecuritySnapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquitySnapshotExData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarrantSnapshotExData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionSnapshotExData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexSnapshotExData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlateSnapshotExData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureSnapshotExData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustSnapshotExData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotBasicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_GetSecuritySnapshot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Qot_GetSecuritySnapshot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Qot_GetSecuritySnapshot_proto_goTypes,
		DependencyIndexes: file_Qot_GetSecuritySnapshot_proto_depIdxs,
		MessageInfos:      file_Qot_GetSecuritySnapshot_proto_msgTypes,
	}.Build()
	File_Qot_GetSecuritySnapshot_proto = out.File
	file_Qot_GetSecuritySnapshot_proto_rawDesc = nil
	file_Qot_GetSecuritySnapshot_proto_goTypes = nil
	file_Qot_GetSecuritySnapshot_proto_depIdxs = nil
}
